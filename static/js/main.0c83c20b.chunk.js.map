{"version":3,"sources":["components/Recipe.js","FoodApi.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","recipe","strSource","strInstructions","strMeal","strCategory","strArea","strMealThumb","ingredientsList","Object","keys","filter","elem","includes","map","n","measuresList","instruction","split","className","src","alt","i","href","target","rel","FoodApi","useState","recipes","setRecipes","getData","a","Axios","get","result","console","log","data","meals","style","background","padding","borderRadius","cursor","border","marginTop","onClick","key","idMeal","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8SA0EeA,EAvEA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEdC,EAQED,EARFC,UACAC,EAOEF,EAPFE,gBACAC,EAMEH,EANFG,QACAC,EAKEJ,EALFI,YACAC,EAIEL,EAJFK,QACAC,EAGEN,EAHFM,aAIIC,EAAkBC,OAAOC,KAAKT,GAAQU,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAAS,oBAAkBC,KAAI,SAAAF,GAAI,OAAIX,EAAOW,MAAOD,QAAO,SAAAI,GAAC,OAAIA,KAC3HC,EAAeP,OAAOC,KAAKT,GAAQU,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAAS,iBAAeC,KAAI,SAAAF,GAAI,OAAIX,EAAOW,MAAOD,QAAO,SAAAI,GAAC,OAAIA,KACrHE,EAAcd,EAAgBe,MAAM,KAAKP,QAAO,SAAAC,GAAI,OAAIA,KAE9D,OACE,6BACE,yBAAKO,UAAU,QACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,QAAQC,IAAKb,EAAcc,IAAKjB,KAEjD,yBAAKe,UAAU,eACb,yBAAKA,UAAU,SACb,4BAAKf,IAEP,yBAAKe,UAAU,gBACb,4BACE,0BAAMA,UAAU,WAAhB,aADF,IAC8Cd,EAAa,KAE3D,4BACE,0BAAMc,UAAU,WAAhB,WADF,IAC4Cb,KAIhD,yBAAKa,UAAU,UACb,yBAAKA,UAAU,eACb,2CACA,wBAAIA,UAAU,QACXX,EAAgBM,KAAI,SAACF,EAAMU,GAAP,OACnB,4BACE,0BAAMH,UAAU,WAAWH,EAAaM,IAD1C,IACsDV,QAO5D,yBAAKO,UAAU,UACb,sCACA,yBAAKA,UAAU,eACZF,EAAYH,KAAI,SAAAF,GAAI,OACnB,uBAAGO,UAAU,YAAYP,EAAzB,WAKPV,EAAa,uBACZqB,KAAMrB,EACNiB,UAAU,SACVK,OAAO,SACPC,IAAI,uBAJQ,kBAON,MC5BDC,EAhCC,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACbC,EADa,KACJC,EADI,KAEdC,EAAO,uCAAG,4BAAAC,EAAA,sEACOC,IAAMC,IACzB,sDAFY,OACRC,EADQ,OAIdC,QAAQC,IAAIF,GACZL,EAAWK,EAAOG,KAAKC,OALT,2CAAH,qDAeb,OACE,6BACE,4BAAQC,MAVE,CACZC,WAAY,UACZC,QAAS,iBACTC,aAAc,MACdC,OAAQ,UACRC,OAAQ,OACRC,UAAW,UAIaC,QAAShB,GAA/B,iBAGA,yBAAKX,UAAU,WACZS,IAAY,IACXA,EAAQd,KAAI,SAACb,GAAD,OACV,kBAAC,EAAD,CAAQ8C,IAAK9C,EAAO+C,OAAQ/C,OAAQA,UCbjCgD,MAdf,WACE,OACE,yBAAK9B,UAAU,OACb,gCACE,0EACA,iGAIF,kBAAC,EAAD,QCDc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.0c83c20b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Recipe = ({ recipe }) => {\r\n  const {\r\n    strSource,\r\n    strInstructions,\r\n    strMeal,\r\n    strCategory,\r\n    strArea,\r\n    strMealThumb,\r\n\r\n\r\n  } = recipe;\r\n  const ingredientsList = Object.keys(recipe).filter(elem => elem.includes(\"strIngredient\")).map(elem => recipe[elem]).filter(n => n);\r\n  const measuresList = Object.keys(recipe).filter(elem => elem.includes(\"strMeasure\")).map(elem => recipe[elem]).filter(n => n);\r\n  const instruction = strInstructions.split(\".\").filter(elem => elem);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"card\">\r\n        <div className=\"image-card\">\r\n          <img className=\"image\" src={strMealThumb} alt={strMeal} />\r\n        </div>\r\n        <div className=\"main-banner\">\r\n          <div className=\"title\">\r\n            <h1>{strMeal}</h1>\r\n          </div>\r\n          <div className=\"category-row\">\r\n            <h3>\r\n              <span className=\"smaller\">Category:</span> {strCategory}{\" \"}\r\n            </h3>\r\n            <h3>\r\n              <span className=\"smaller\">Cusine:</span> {strArea}\r\n            </h3>\r\n          </div>\r\n        </div>\r\n        <div className=\"recipe\">\r\n          <div className=\"ingredients\">\r\n            <h3>Ingredinets</h3>\r\n            <ul className=\"list\">\r\n              {ingredientsList.map((elem, i) => (\r\n                <li>\r\n                  <span className=\"measure\">{measuresList[i]}</span> {elem}\r\n                </li>\r\n              ))}\r\n\r\n            </ul>\r\n\r\n          </div>\r\n          <div className=\"method\">\r\n            <h3>Method</h3>\r\n            <div className=\"description\">\r\n              {instruction.map(elem => (\r\n                <p className=\"sentence\">{elem}.</p>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {strSource ? (<a\r\n          href={strSource}\r\n          className=\"source\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Link to source\r\n        </a>) : \"\"}\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useState } from \"react\";\r\nimport Axios from \"axios\";\r\n\r\nimport Recipe from \"./components/Recipe\";\r\n\r\n\r\nconst FoodApi = () => {\r\n  const [recipes, setRecipes] = useState([]);\r\n  const getData = async () => {\r\n    const result = await Axios.get(\r\n      \"https://www.themealdb.com/api/json/v1/1/random.php\"\r\n    );\r\n    console.log(result);\r\n    setRecipes(result.data.meals);\r\n  };\r\n  const style = {\r\n    background: \"#3DC79D\",\r\n    padding: \"0.75rem 1.5rem\",\r\n    borderRadius: \"3px\",\r\n    cursor: \"pointer\",\r\n    border: \"none\",\r\n    marginTop: \"1.5rem\",\r\n  };\r\n  return (\r\n    <div>\r\n      <button style={style} onClick={getData}>\r\n        Random Recipe\r\n      </button>\r\n      <div className=\"recipes\">\r\n        {recipes !== [] &&\r\n          recipes.map((recipe) => (\r\n            <Recipe key={recipe.idMeal} recipe={recipe} />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FoodApi;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport FoodApi from \"./FoodApi\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h2>Want to eat something but don't know what?</h2>\r\n        <h3>\r\n          Try out one of the random recipes. It may become your favourite.\r\n        </h3>\r\n      </header>\r\n      <FoodApi />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}